/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define FUNC    3
#define NUM     4

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | DEL  |
// | LALT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  '"  |  TG(NUM)   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | FUNC  |
//                | LCTRL | ENT | LOWER/Tab |     | RAISE/BSPC | SPACE | RSHFT |
                        bindings = <
   &kp TILDE &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp DEL
   &sk LALT  &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SQT  &tog 4
   &sk LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &sl FUNC
        &sk LCTRL  &mt LGUI RET &lt 1 TAB    &lt 2 BSPC &kp SPACE &sk RSHFT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |      |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      |
// |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |      |
// |      |     |  ~  |  `  |  [  |  {  |   |  }  |  ]  |     |  => |     |      |
//                  |     |     | LOWER |   |     |     |  :  |
                        bindings = <
   &trans    &kp EXCL &kp AT    &kp HASH  &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR    &kp RPAR &trans
   &trans    &kp N1   &kp N2    &kp N3    &kp N4   &kp N5      &kp N6    &kp N7    &kp N8          &kp N9      &kp N0   &trans
   &trans    &trans   &kp TILDE &kp GRAVE &kp LBKT &kp LBRC    &kp RBRC  &kp RBKT  &trans          &arrow_func &trans   &trans
                                 &trans   &trans   &mo LOWER   &trans    &trans    &kp COLON
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |   |  DEL |     |   _  |   +   | PgUp |    |       |      |  UP  |   \   |  "|" |     |
// |   | HOME | END |   -  |   =   | PgDn |    | PrtSc | LEFT | DOWN | RIGHT | MENU |     |
// |   |   <  |  >  | Copy | Paste |   ;  |    |  ‚èØ  |  ‚èÆ  |  ‚è≠  |  üîâ  |  üîä  |     |
//                    | ESC |      |      |    | RAISE |     |     |
                        bindings = <
   &trans &kp DEL  &none   &kp UNDER &kp PLUS  &kp PG_UP    &none     &none      &kp UP     &kp BSLH     &kp PIPE     &trans
   &trans &kp HOME &kp END &kp MINUS &kp EQUAL &kp PG_DN    &kp PSCRN &kp LEFT   &kp DOWN   &kp RIGHT    &kp K_APP    &trans
   &trans &kp LT   &kp GT  &kp LC(C) &kp LC(V) &kp SEMI     &kp C_PP  &kp C_PREV &kp C_NEXT &kp C_VOL_DN &kp C_VOL_UP &trans
                    	     &kp ESC &trans    &none        &mo RAISE   &trans    &trans
                        >;
                };
                func_layer {
// -----------------------------------------------------------------------------------------
// |    | F1   | F2  | F3  | F4  | F5  |    |  F6  | F7  | F8  | F9  | F10  |     |
// |    | F11  | F11 |     |     |     |    | BTCLR| BT1 | BT2 | BT3 | BT4  | BT5 |
// |    | CAPS |     |     |     |     |    |     |     |     |      | RESET|     |
//                   |     |     |     |    |     |     |     |
                        bindings = <
   &trans  &kp F1   &kp F2      &kp F3  &kp F4  &kp F5       &kp F6     &kp F7       &kp F8       &kp F9       &kp F10      &trans
   &trans  &kp F11  &kp F12     &none   &none   &none        &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
   &trans  &kp CAPS &bootloader &none   &none   &none        &none      &none        &none        &none        &bootloader  &mo FUNC
                                &none   &none   &none        &none      &none        &none
                        >;
                };
                num_layer {
// -----------------------------------------------------------------------------------------
// |    | DEL |  7  |  8  |  9  |  -  |   |    |    |    |    |    |    |
// |    | Bksp|  4  |  5  |  6  |  +  |   |    |    |    |    |    |    |
// |    |  /  |  1  |  2  |  3  |  *  |   |    |    |    |    |    |    |
//                  |  0  |  .  | ENT |   | Bksp |  SPC  |     |
                        bindings = <
   &trans  &kp DEL       &kp N7  &kp N8  &kp N9  &kp KP_MINUS           &none   &none   &none   &none   &none   &trans
   &trans  &kp BSPC      &kp N4  &kp N5  &kp N6  &kp KP_PLUS            &none   &none   &none   &none   &none   &trans
   &trans  &kp KP_DIVIDE &kp N1  &kp N2  &kp N3  &kp KP_ASTERISK        &none   &none   &none   &none   &none   &trans
                                 &kp N0  &kp DOT &kp ENTER              &kp BSPC  &kp SPACE   &none
                        >;
                };
        };
  macros {
        
        ZMK_MACRO(arrow_func,
                wait-ms = <30>;
                tap-ms = <40>;
                bindings = <&kp EQUAL &kp GT>;
        )
  };
};
